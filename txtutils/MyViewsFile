# I have created this file - Siddharth
from django.http import HttpResponse
from django.shortcuts import render


def index(request):
    return render(request, 'index.html')


def removepunc(request):
    # Get the text
    djtext = request.POST.get('text', 'default')

    # Check checkbox values
    removepunc_checked = request.POST.get('removepunc', 'off')
    fullcaps_checked = request.POST.get('FullCaps', 'off')
    newlineremover_checked = request.POST.get('newlineremover', 'off')
    extraspaceremover_checked = request.POST.get('extraspaceremover', 'off')

    # Initialize variables to hold the modified text and a list of operations
    analyzed_text = djtext
    purposes = [] # A list to hold the purposes of all operations

    # Check which checkbox is on
    if removepunc_checked == "on":
        punctuations = '''!()-[]{};:'"\,<>./?@#$%^&*_~'''
        temp_text = ""
        for char in analyzed_text:
            if char not in punctuations:
                temp_text = temp_text + char
        
        analyzed_text = temp_text
        purposes.append('Removed Punctuations') # Add to list

    if fullcaps_checked == "on":
        analyzed_text = analyzed_text.upper()
        purposes.append('Changed to Uppercase') # Add to list

    if extraspaceremover_checked == "on":
        temp_text = analyzed_text
        # Keep replacing double spaces with single spaces until none are left
        while "  " in temp_text:
            temp_text = temp_text.replace("  ", " ")
        
        analyzed_text = temp_text
        purposes.append('Removed Extra Spaces') # Add to list (Corrected)

    if newlineremover_checked == "on":
        temp_text = ""
        for char in analyzed_text:
            if char != "\n" and char != "\r":
                temp_text = temp_text + char
        
        analyzed_text = temp_text
        purposes.append('Removed NewLines') # Add to list

    # Check if *any* operation was selected
    if not purposes: # If the list is empty
        return HttpResponse("please select any operation and try again")

    # Format the final purpose string by joining all operations
    final_purpose = ' and '.join(purposes)
    parameters = {'purpose': final_purpose, 'analyzed_text': analyzed_text}

    return render(request, 'analyze.html', parameters)


def about(request):
    return render(request, 'about.html')